Ext.ux.DBorderView = Ext.extend(Ext.Viewport, {
    initComponent: function() {
        this.layout = 'form';
		this.createStore();
		this.creatgoodsstore();
		this.createForm();
		this.createColumns();
		this.createTbar();
		this.creatselectionmodel();
		this.creatBbar();
		this.creatgrid();
		this.creatgoodsview();
		this.creatitems();
		this.grid.getSelectionModel().on('selectionchange', function(sm){
			this.grid.removeBtn.setDisabled(sm.getCount() < 1);
			this.grid.editBtn.setDisabled(sm.getCount() < 1);
			this.grid.removeBtn1.setDisabled(sm.getCount() < 1);
			this.grid.peditBtn.setDisabled(sm.getCount() < 1);
			this.grid.prtBtn.setDisabled(sm.getCount() < 1);
		});
        Ext.ux.DBorderView.superclass.initComponent.call(this);
    },
    createStore: function() {
        this.store = new Ext.data.Store({
		proxy : new Ext.data.HttpProxy({url:this.listURL}),
        reader: new Ext.data.JsonReader({
			root: 'topics',
            totalProperty: 'totalCount',
            id: this.fields[0]
			},this.fields)
    	});
		this.store.load({
			params:{start:0,limit:this.pagesize},
			scope:this.store
			});
		this.store.on('beforeload',function(){
			var values = Ext.getCmp('searchform').getForm().getFieldValues();
			Ext.apply(
			this.baseParams,
			{
					keyword:Ext.fly('keyword').dom.value,
					db_status:values.db_status,
					starttime:values.starttime,
					totime:values.totime,
					depot_id_from:values.depot_id_from,
					depot_id_to:values.depot_id_to,
					first_shipping:values.first_shipping,
					db_shipping:values.db_shipping,
					key:values.keywords					
			});
		});
    },
	createColumns: function() {
		var ds = this.store;
		var addURL = this.addURL;
        var cols = [];
		cols.push(new Ext.grid.RowNumberer());
        for (var i = 1; i < this.fields.length-2; i++) {
            var f = this.fields[i];
			var h = this.headers[i];
			if(i==1){
					cols.push({
						header: h,
						dataIndex: f,
						renderer:function(val,x,rec){
								var str = (rec.get('comment'))?'<img src="themes/default/images/comment.gif" title="'+rec.get('comment') + '">':'';
								return  '<b>'+val+'</b>' + str ;
							   }
					});				
				}else{
					cols.push({
						header: h,
						dataIndex: f
					});
				}
        }
		cols.push({
				  header:'操作',
				  width:45,
				  xtype: 'actioncolumn',
				  items:[{
						icon   : 'themes/default/images/update.gif',	 
						tooltip: '编辑单据',
						handler: function(grid, rowIndex, colIndex) {
							var id = ds.getAt(rowIndex).get('order_id');
							parent.openWindow(id,'编辑订单',addURL+'&order_id='+id,1000,580);
							//alert("编辑 " + rec.get('order_id'));
						}
						 }],
			renderer:function(v,m,rec){
				if(rec.get('realstatus') == 1 || rec.get('realstatus') == 3) {
					this.items[0].iconCls ='hidden';
					}else{
					this.items[0].iconCls ='';
					}
				}
				  });
        this.columns = cols;
    },
    createTbar: function() {
		var store = this.store;
		var addURL=this.addURL;
		var pagesize= this.pagesize;
        this.tbar = [{
            text: '新建调拨',
            iconCls: 'x-tbar-add',
			ref: '../addBtn',
            handler: function(){
				parent.openWindow(id,'新建调拨单',addURL,1000,580);
				}
        },{
            text: '确认在途',
            iconCls: 'x-tbar-save',
			ref: '../peditBtn',
			disabled:true,
            handler: this.updateRecord.createDelegate(this,['3'])
        },{
            text: '确认完成',
            iconCls: 'x-tbar-save',
			ref: '../editBtn',
			disabled:true,
            handler: this.updateRecord.createDelegate(this,['1'])
        },{
            text: '强制结单',
            iconCls: 'x-tbar-del',
			ref: '../removeBtn1',
			disabled:true,
            handler: this.updateRecord.createDelegate(this,['5'])
        }, {
            text: '删除单据',
            iconCls: 'x-tbar-del',
			ref: '../removeBtn',
			disabled:true,
            handler: this.updateRecord.createDelegate(this,['2'])
        }, {
            text: '打印',
            iconCls: 'x-tbar-print',
			ref: '../prtBtn',
			disabled:true,
            handler: this.updateRecord.createDelegate(this,['4'])
        },'->','-','关键词:',{
						xtype:'textfield',
						id:'keyword',
					    name:'keyword'
					},'-',{
						xtype:'button',
						text:'搜索',
						iconCls:'x-tbar-search',
						handler:function(){
							store.load({params:{start:0, limit:pagesize,
								keyword:Ext.fly('keyword').dom.value
								}});
							}
					},'-',{
						xtype:'button',
						text:'高级搜索',
						iconCls:'x-tbar-advsearch',
						handler:this.showWindow.createDelegate(this)
					},'-',{
						xtype:'button',
						text:'导出搜索',
						iconCls:'x-tbar-import',
						handler:function(){
						var values = Ext.getCmp('searchform').getForm().getFieldValues();
							window.open().location.href = 'index.php?model=inventory&action=exportAllocation&keyword='+Ext.fly('keyword').dom.value+'&starttime='+values.starttime+'&totime='+values.totime+'&db_status='+values.db_status+'&depot_id_from='+values.depot_id_from+'&depot_id_to='+values.depot_id_to+'&first_shipping='+values.first_shipping+'&db_shipping='+values.db_shipping+'&key='+values.keywords;
							}
					}];
    },
    getSelectedRecord: function() {
        var sm = this.grid.getSelectionModel();
        if (sm.getCount() == 0) {
            Ext.example.msg('Info', 'Please select one row.');
            return false;
        } else {
            return sm.getSelections()[0];
        }
    },
    updateRecord: function(str) {
		var thiz = this.store;
        var r = this.getSelectedRecord();
        if (r != false) {
		if(str == 4){
			window.open(this.printURL+'&order_id='+r.data.order_id);
			return false;
			}
		if(r.data.realstatus > 0 && str == 2) {
            Ext.Msg.confirm('操作提示!', '该订单已进行过处理,确定删除?', function(btn) {
                if (btn == 'yes') {
					Ext.Ajax.request({
					   url: this.updateURL+'&order_id='+r.data.order_id+'&status='+str,
						success:function(response,opts){
							var res = Ext.decode(response.responseText);
								if(res.success){
								thiz.reload();
								Ext.Msg.alert('MSG',res.msg);
								}else{
								Ext.Msg.alert('ERROR',res.msg);
								}						
							}
						});
                }
            }, this);
		}else{
				if(r.data.realstatus == 1 || (r.data.realstatus == 3 && str == 3)) {Ext.example.msg('ERROR','该单据已进行过处理');return false;}
					Ext.Msg.confirm('操作提示!', '确定修改订单状态?', function(btn) {
						if (btn == 'yes') {
							Ext.Ajax.request({
							   url: this.updateURL+'&order_id='+r.data.order_id+'&status='+str,
								success:function(response,opts){
									var res = Ext.decode(response.responseText);
										if(res.success){
										thiz.reload();
										Ext.Msg.alert('MSG',res.msg);
										}else{
										Ext.Msg.alert('ERROR',res.msg);
										}						
									}
								});
						}
					}, this);
		}
        }
	},
	creatselectionmodel:function(){
		var thiz = this;
			var sm = new Ext.grid.CheckboxSelectionModel({
						listeners:{
							"rowselect":{
								fn:function(e,rowindex,record){
									thiz.setid(record.data.order_id);
									thiz.goodstore.load({
											params:{order_id:record.data.order_id,start:0,limit:10},
											scope:this.store
											});
										}
								}
							}								 
						});
		this.sm = sm;
	},
	setid:function(id){
			this.selectid = id;
		},
	getid:function(id){
		return this.selectid;
	},
	creatBbar: function() {
		var	pagesize = this.pagesize;
       this.bbar =  new Ext.PagingToolbar({
			pageSize: pagesize,
			displayInfo: true,
			displayMsg: '第{0} 到 {1} 条数据 共{2}条',
			emptyMsg: "没有数据",
            store: this.store			   
        });
    },
	creatgrid:function(){
		this.grid = new Ext.grid.GridPanel({
			title:'<b>调拨单列表</b>',
			loadMask:true,
			frame:true,
			autoHeight: true,
			viewConfig:{
            	forceFit: true
        		},
			region:'center',
			store: this.store,
			columns: this.columns,
			sm:this.sm,
			tbar:this.tbar,
			bbar:this.bbar
   		 });
	},
	creatgoodsstore:function(){
		var thiz  = this;
		 this.goodstore = new Ext.data.Store({
			proxy : new Ext.data.HttpProxy({url:this.goodsURL}),
			reader: new Ext.data.JsonReader({
				root: 'topics',
				totalProperty: 'totalCount',
				id: 'rec_id'
				},['rec_id','goods_qty','goods_id','goods_sn','goods_name','no','is_ok']),
			listeners:{
						load: function(){
							var order_id = thiz.getid();
							Ext.apply(
							this.baseParams,
							{
								order_id:order_id
							});
						}
					}
    	});
	},
	creatgoodsview:function(){
		var thiz = this;
		var sm = new Ext.grid.CheckboxSelectionModel();
		this.goodsview = new Ext.grid.GridPanel({
				store:this.goodstore,
				autoWidth:true,
				loadMask:true,
				height:250,
				region:'south',
				title:'单据明细',
				autoScroll :true,
				sm:sm,
				columns: [sm,{
					header: '产品编码',
					dataIndex: 'goods_sn'
				},{
					header: '产品名称',
					width:300,
					dataIndex: 'goods_name'
				},{
					header: '产品数量',
					dataIndex: 'goods_qty'
				},{
					header: '箱号',
					dataIndex: 'no'
				},{
					header: '状态',
					dataIndex: 'is_ok',
					renderer:function(v){ if(v==0) return '未到货';if(v==1) return '已到货';if(v==2) return '已报损';}
				}],
				bbar:new Ext.PagingToolbar({
						pageSize: 10,
						displayInfo: true,
						displayMsg: '第{0} 到 {1} 条数据 共{2}条',
						emptyMsg: "没有数据",
						store: thiz.goodstore,
						items:['-',{
								   text:'确认到货',
								   pressed:true,
								   handler:this.updatestatus.createDelegate(this)
								   }]	   
					})
			});
	},
	updatestatus:function()
	{
		var ids = getIds(this.goodsview);
		var updateurl = this.updategoodsURL;
		var thiz = this.store;
		var goodsstore = this.goodstore;
		if(!ids) return false;
		Ext.getBody().mask("Updating Data .waiting...","x-mask-loading");
		Ext.Ajax.request({
			url:updateurl,
					success:function(response){
						Ext.example.msg('提示',response.responseText);
						thiz.reload();
						goodsstore.reload();
						Ext.getBody().unmask();
						},
					failure:function(response){
						Ext.example.msg('警告','确认到货失败');
						Ext.getBody().unmask();
						},
			params:{id:ids}			 
		});
	},
	creatitems:function(){
		return this.items = [this.grid,this.goodsview];
	},
    showWindow: function() {
        this.getWindow().show();
    },

    hideWindow: function() {
        this.getWindow().hide();
    },

    getWindow: function() {
        if (!this.gridWindow) {
            this.gridWindow = this.createWindow();
        }
        return this.gridWindow;
    },

    createWindow: function() {
        var formPanel = this.getFormPanel();

        var win = new Ext.Window({
			id:'searchwin',
            title: this.windowTitle,
            closeAction: 'hide',
			width:this.windowWidth,
			height:this.windowHeight,
            modal: true,
            items: [
                formPanel
            ]
        });
        return win;
    },
    getFormPanel: function() {
        if (!this.gridForm) {
            this.gridForm = this.createForm();
        }
        return this.gridForm;
    },
    createForm: function() {
		var store = this.store;
		var status = this.status;
		var db_shipping = this.db_shipping;
		var depot = this.depot;
		var first_shipping = this.first_shipping;
		var pagesize = this.pagesize;
        var form = new Ext.form.FormPanel({
            frame: true,
            defaultType: 'textfield',
            buttonAlign: 'center',
            labelAlign: 'right',
            labelWidth: 70,
			id:'searchform',
            trackResetOnLoad: true,
            items: [{
								xtype:'combo',
								store: new Ext.data.SimpleStore({
									 fields: ["id", "key_type"],
									 data: status
								}),
								valueField :"id",
								displayField: "key_type",
								mode: 'local',
								width:130,
								editable: false,
								forceSelection: true,
								triggerAction: 'all',
								hiddenName:'db_status',
								name: 'db_status',
								value:99,
								allowBlank:false,
								fieldLabel: '状态',
								id:'status'
							},{
						xtype:'datefield',
						name:'starttime',
						format:'Y-m-d',
						fieldLabel:'From'
					},{
						xtype:'datefield',
						name:'totime',
						format:'Y-m-d',
						fieldLabel:'To'
					},{
								xtype:'combo',
								store: new Ext.data.SimpleStore({
									 fields: ["id", "key_type"],
									 data: first_shipping
								}),
								valueField :"id",
								displayField: "key_type",
								mode: 'local',
								editable: false,
								forceSelection: true,
								triggerAction: 'all',
								width:80,
								hiddenName:'first_shipping',
								value:99,
								fieldLabel: '头程渠道',
								allowBlank:false,
								id:'firstshipping'						
					},{
								xtype:'combo',
								store: new Ext.data.SimpleStore({
									 fields: ["id", "key_type"],
									 data: db_shipping
								}),
								valueField :"id",
								displayField: "key_type",
								mode: 'local',
								editable: false,
								forceSelection: true,
								triggerAction: 'all',
								width:80,
								value:99,
								hiddenName:'db_shipping',
								fieldLabel: '物流方式',
								allowBlank:false,
								id:'shipping'						
					},{
								xtype:'combo',
								store: new Ext.data.SimpleStore({
									 fields: ["id", "key_type"],
									 data: depot
								}),
								valueField :"id",
								displayField: "key_type",
								mode: 'local',
								editable: false,
								forceSelection: true,
								triggerAction: 'all',
								width:120,
								value:99,
								hiddenName:'depot_id_from',
								fieldLabel: '调出仓',
								allowBlank:false,
								id:'depot_from'						
					},{
								xtype:'combo',
								store: new Ext.data.SimpleStore({
									 fields: ["id", "key_type"],
									 data: depot
								}),
								valueField :"id",
								displayField: "key_type",
								mode: 'local',
								editable: false,
								forceSelection: true,
								triggerAction: 'all',
								width:120,
								value:99,
								hiddenName:'depot_id_to',
								fieldLabel: '调入仓',
								allowBlank:false,
								id:'depot_to'						
					},{
						name:'keywords',
						fieldLabel: '关键词',
						value:'',
						enableKeyEvents:true,
						listeners:{
						scope:this,
						keypress:function(field,e){
							if(e.getKey()==13){
								Ext.fly('keyword').dom.value = '';
								var values = Ext.getCmp('searchform').getForm().getFieldValues();
									store.load({params:{start:0, limit:pagesize,
												keyword:Ext.fly('keyword').dom.value,
												db_status:values.db_status,
												starttime:values.starttime,
												totime:values.totime,
												depot_id_from:values.depot_id_from,
												depot_id_to:values.depot_id_to,
												first_shipping:values.first_shipping,
												db_shipping:values.db_shipping,
												key:values.keywords					
												}});
									Ext.getCmp('searchwin').hide();
								}
							}
						}
					}],
            buttons: [{
                text: 'submit',
				handler:function(){
						Ext.fly('keyword').dom.value = '';
						var values = Ext.getCmp('searchform').getForm().getFieldValues();
							store.load({params:{start:0, limit:pagesize,
												keyword:Ext.fly('keyword').dom.value,
												db_status:values.db_status,
												starttime:values.starttime,
												totime:values.totime,
												depot_id_from:values.depot_id_from,
												depot_id_to:values.depot_id_to,
												first_shipping:values.first_shipping,
												db_shipping:values.db_shipping,
												key:values.keywords					
										}});
							Ext.getCmp('searchwin').hide();
						}
            }, {
                text: 'reset',
                handler: function() {
                    form.getForm().reset();
                }
            }]
        });
        return form;
    }
});