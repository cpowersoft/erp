Ext.ux.BillForm = Ext.extend(Ext.FormPanel, {
	initComponent: function() {
		this.frame = true,
		this.buttonAlign = 'center',
		this.txt_totQty = new Ext.form.TextField({
							id : 'txt_totQty',
							anchor : '95%',
							allowBlank : true,
							value : 0,
							readOnly : true,
							fieldClass : 'textReadOnly'
						}),
		this.creatoperatorstore();
		this.creatselectstore();
		this.creatinfopart();
		this.creatGridcm();
		this.creatGoodsstore();
		this.creatGoodsgrid();
		this.creatItems();
		this.creatButtons();
		this.goodsGrid.getSelectionModel().on('selectionchange', function(sm){
			Ext.getCmp('removeBtn').setDisabled(!sm.hasSelection());
		});
        Ext.ux.BillForm.superclass.initComponent.call(this);
    },
	creatoperatorstore:function(){//操作员明细
		var operator_id = this.order.operator_id;
		this.operatorstore = new Ext.data.Store({
			proxy : new Ext.data.HttpProxy({url:this.listUserURL}),
			reader: new Ext.data.JsonReader({
					root: 'topics',
					totalProperty: 'totalCount',
					id: 'user_id'
					},['user_id','user_name']),
			autoLoad:true,
			listeners:{
						load: function(){
							Ext.getCmp('operatorid').setValue(operator_id);
						}
					}
		});
	},
	creatinfopart:function(){//基本信息
		this.infopart = new Ext.form.FieldSet({
				height:125,
				layout:'column',
				items:[{
						columnWidth:.3,
						layout: 'form',
						items:[
							 {
								xtype:'combo',
								store: this.operatorstore,
								valueField :"user_id",
								displayField: "user_name",
								mode: 'local',
								editable: false,
								forceSelection: true,
								hiddenName:'operator_id',
								triggerAction: 'all',
								fieldLabel: '操作员',
								allowBlank:false,
								pagesise:10,
								minListWidth:220,
								value:this.order.operator_id,
								id:'operatorid'							
							},{
								xtype:'textfield',
								fieldLabel: '订单备注',
								value:this.order.comment,
								id:'comment'	
							},{
								xtype:'combo',
								store: new Ext.data.SimpleStore({
									 fields: ["id", "key_type"],
									 data: this.first_shipping
								}),
								valueField :"id",
								displayField: "key_type",
								mode: 'local',
								editable: false,
								forceSelection: true,
								hiddenName:'first_shipping',
								triggerAction: 'all',
								fieldLabel: '头程渠道',
								allowBlank:false,
								pagesise:10,
								width:130,
								value:this.order.first_shipping,
								id:'first_shipping_id'							
							},{
								xtype:'textfield',
								fieldLabel: '追踪单号',
								value:this.order.track_no,
								id:'track_no'	
							}
						]
					},{
						columnWidth:.3,
						layout: 'form',
						items:[
							{
								xtype:'combo',
								store: new Ext.data.SimpleStore({
									 fields: ["id", "key_type"],
									 data: this.depot
								}),
								valueField :"id",
								displayField: "key_type",
								mode: 'local',
								editable: false,
								forceSelection: true,
								hiddenName:'depot_id_from',
								triggerAction: 'all',
								fieldLabel: '调出仓',
								allowBlank:false,
								pagesise:10,
								width:130,
								value:this.order.depot_id_from,
								id:'depot_from'							
							},{
								xtype:'combo',
								store: new Ext.data.SimpleStore({
									 fields: ["id", "key_type"],
									 data: this.depot
								}),
								valueField :"id",
								displayField: "key_type",
								mode: 'local',
								editable: false,
								forceSelection: true,
								hiddenName:'depot_id_to',
								triggerAction: 'all',
								fieldLabel: '调入仓',
								allowBlank:false,
								pagesise:10,
								width:130,
								value:this.order.depot_id_to,
								id:'depot_to'							
							},{
								xtype:'combo',
								store: new Ext.data.SimpleStore({
									 fields: ["id", "key_type"],
									 data: this.db_shipping
								}),
								valueField :"id",
								displayField: "key_type",
								mode: 'local',
								editable: false,
								forceSelection: true,
								hiddenName:'db_shipping',
								triggerAction: 'all',
								fieldLabel: '货运方式',
								allowBlank:false,
								pagesise:10,
								width:130,
								value:this.order.db_shipping,
								id:'db_shipping_id'							
							}
						]
					},{
						columnWidth:.3,
						layout: 'form',
						items:[
							 {
								xtype:'combo',
								store: new Ext.data.SimpleStore({
									 fields: ["id", "key_type"],
									 data: this.orderstatus
								}),
								valueField :"id",
								displayField: "key_type",
								mode: 'local',
								width:130,
								editable: false,
								readOnly:true,
								forceSelection: true,
								triggerAction: 'all',
								hiddenName:'status',
								value:this.order.status,
								allowBlank:false,
								fieldLabel: '订单状态',
								id:'statusid'
							},{
								xtype:'textfield',
								fieldLabel: '箱数',
								value:this.order.count,
								id:'count'	
							},{
								xtype:'textfield',
								fieldLabel: '重量',
								value:this.order.weight,
								id:'weight'	
							},{fieldLabel: '订单编码',id:'order_sn',value:this.order.order_sn,xtype:'hidden'}
							,{fieldLabel: '订单号',id:'order_id',value:this.order.order_id,xtype:'hidden'}
						]
					}]
			});
		var Item = Ext.data.Record.create([{
			id:'supplier',
			name:'supplier_name'
		}]);
		if(this.order.supplier && this.inout == 1)	{
		var p = new Item({id:this.order.supplier,name:this.order.supplier_name});
		this.Supplierstore.add(p);
			Ext.getCmp('supplier_id').setValue(this.order.supplier);
		}
	},
	
	creatGoodsstore:function(){//订单明细store
		this.goodsstore = new Ext.data.Store({
			proxy : new Ext.data.HttpProxy({url:this.goodsURL}),
			baseParams : {
				order_id : this.order.order_id
						},
			pruneModifiedRecords:true,
			reader: new Ext.data.JsonReader({
					root: 'topics',
					totalProperty: 'totalCount',
					id: 'rec_id'
					},['rec_id','goods_qty','goods_id','goods_sn','goods_name']),
			listeners : {
				'load' : this.calculate.createDelegate(this),
				'add' : this.calculate.createDelegate(this),
				'remove' : this.calculate.createDelegate(this),
				'update' : this.calculate.createDelegate(this)
			}
		});
		this.goodsstore.load();
	},
	
	creatGridcm:function(){
		var thiz = this;
		this.cmlist = new Ext.grid.ColumnModel([{
						header : '产品编码<font color=red>*</font>',
						dataIndex:'goods_sn',
						align : 'left'
					}, {
						header:'产品名称<font color=red>*</font>',
						width:250,
						dataIndex:'goods_name',
						align:'left'
					}, {
						header:'产品数量<font color=red>*</font>',
						dataIndex:'goods_qty',
						align:'right',
						editor:new Ext.form.NumberField({
							allowBlank:false,
							allowNegative:false,
							decimalPercision:4,
							style:'text-align:left'
						})
					}, {
						header:'箱号',
						dataIndex:'no',
						align:'right',
						editor:new Ext.form.TextField()
					}]);
	},
	checkItem:function(value){
		if(value == '') return false;
		var store = this.goodsstore;
		var thiz = this;
		var mk = new Ext.LoadMask(Ext.getBody(), {
			msg: '正在获取数据，请稍候！',
			removeMask: true //完成后移除
			});
		mk.show(); 
		Ext.Ajax.request({
			url:'index.php?model=goods&action=getgoods',
			timeout:180000,
			loadMask:true,
					success:function(response){
						var res = response.responseText.split('|');
						if(res[0] == 0){
							Ext.example.msg('提示','找不到对应的产品');
						}else{
							var index = store.findBy(function(record,id){
									return  record.get('goods_sn') == value && record.get('goods_id') == 0;									
																});
							var record = store.getAt(index);
							if(record){
							record.set('goods_id',res[1]);
							record.set('goods_name',res[2]);
							thiz.addItem();
							}
						}
						mk.hide();
						},
					failure:function(response){
						if(reqst=='-1'){ 
							Ext.example.msg('警告','获取产品信息超时退出');
						}else{
							Ext.example.msg('警告','获取产品信息失败');
						}
						mk.hide();
						},
			params:{sku:value}			 
		});
		},
	creatGoodsgrid:function(){//创建产品明细
		this.goodsGrid =new Ext.grid.EditorGridPanel({
					frame:true,
					id : "destPanel",
					title:'单据产品明细',
					height : 300,
					autoWidth : true,
					cm : this.cmlist,
					sm: new Ext.grid.RowSelectionModel({singleSelect:true}),
					ds : this.goodsstore,
					clicksToEdit : 1,
					stripeRows : true, // 让基数行和偶数行的颜色不一样
					viewConfig : {
						forceFit : true
					},
					border : true,
					iconCls : 'icon-grid',
					tbar : new Ext.Toolbar({
						items : [{
							xtype:'button',
							text:'新增产品',
							id: 'addBtn',
							iconCls: 'x-tbar-add',
							handler:this.createWindow.createDelegate(this,['0'])
						},{
							text: '删除',
							iconCls: 'x-tbar-del',
							id: 'removeBtn',
							handler: this.removeItem.createDelegate(this),
							disabled:true
						}]
					}),
					bbar : new Ext.Toolbar({
						cls : 'u-toolbar-b',
						items : ['合计:', '->', '数量:', this.txt_totQty]
					})
				});
	},

	creatItems:function(){
		this.items = [this.infopart,this.goodsGrid];
	},

	creatButtons:function(){
		this.buttons = [{
				text: '保存',
				type: 'submit', 
				handler:this.formsubmit.createDelegate(this)
			},{
					text: '取消',
					handler:this.formreset.createDelegate(this)
			}];
	},

	formsubmit:function(){
		var saveURL = this.saveURL;
		var addURL = this.addURL;
		if(this.txt_totQty.getValue() == 0){ 
				Ext.example.msg('错误提示','商品数量不能为空');
				return false;
				}
		if(Ext.getCmp('depot_to').getValue() == Ext.getCmp('depot_from').getValue()){ 
				Ext.example.msg('错误提示','调入仓和调出仓不能相同');
				return false;
				}
		if(this.getForm().isValid()){
				var m = this.goodsstore.modified.slice(0);
				var thiz = this.goodsstore;
				var jsonArray = [];
				Ext.each(m,function(item){
					jsonArray.push(item.data);				
					});
				this.getForm().doAction('submit',{
					url:saveURL,
					method:'post',
					params:{'data':Ext.encode(jsonArray)},
					success:function(form,action){
						if (action.result.success) {
							Ext.example.msg('MSG','单据编辑成功');
							window.location.href = addURL+'&order_id='+action.result.msg;
							} else {
								Ext.Msg.alert('修改失败',action.result.msg);
							}
						},
					failure:function(){
							Ext.example.msg('ERROR','单据编辑失败');
						}
				});
		}else{
			Ext.example.msg('ERROR','请正确完成表单内容');
			}
	},

	formreset:function(){//表单重置
		this.form.reset();
	},

	addItem:function(p){//新增物品
		this.goodsstore.insert(0, p);
		this.goodsGrid.startEditing(0, 2); // 光标停留在第几行几列
	},
	removeItem:function(){//移除物品
		var data = this.goodsGrid.getSelectionModel().getSelected().data;
		var index = this.goodsstore.findBy(function(record,id){
				return record.get('goods_id') == data.goods_id && record.get('goods_qty') == data.goods_qty;									
													});
		var id = data.rec_id;
		if(id ==0){
			this.goodsstore.remove(this.goodsstore.getAt(index));return;
		}
		var thiz = this.goodsstore;
		var delURL = this.delURL;
        if (id) {
            Ext.Msg.confirm('Delete Alert!', 'Are you sure?', function(btn) {
                if (btn == 'yes') {
					Ext.Ajax.request({
					   url: delURL+'&id='+id,
						success:function(response,opts){
							var res = Ext.decode(response.responseText);
								if(res.success){
								thiz.remove(thiz.getAt(index));
								Ext.example.msg('MSG',res.msg);
								}else{
								Ext.Msg.alert('ERROR',res.msg);
								}						
							}
						});
                }
            }, this.goodsGrid);
        }
	},
	creatselectstore:function(){//订单明细store
		this.selectstore = new Ext.data.Store({
			url : this.goodsgirdURL,
			baseParams : {
				cat_id : ''
			},
			reader : new Ext.data.JsonReader({
				totalProperty : 'totalCount',
				root : 'topics',
				id:'goods_id'
			}, ['goods_id','goods_sn','SKU','goods_name'])
			});
		this.selectstore.load({
			params:{start:0,limit:20},
			scope:this.selectstore
			});
	},
    createWindow: function(num) {//弹出产品选择窗口
		var selectstore = this.selectstore;
		var thiz = this;
		var Tree = Ext.tree;
		var root = new Tree.AsyncTreeNode({
			text: '总类',
			draggable:false,
			id:'root'
		});
		var tree = new Ext.tree.TreePanel({
			border:true,
			root:root,
			id:'west-panel',
			margins:'0 0 0 0',
			layout:'accordion',
			title:'产品分类',
			collapsible :true,
			layoutConfig:{
				animate:true
				},
			rootVisible:false,
			autoScroll:true,
			loader: new Tree.TreeLoader({
				dataUrl:this.catTreeURL
				})
			});
		tree.on('click',treeClick);
		function treeClick(node,e) {
			 if(node.isLeaf()){
				e.stopEvent();
				selectstore.load({
					params:{start:0,cat_id:node.id,limit:20},
					scope:this.store
					});
			 }
		};
		var grid = new Ext.grid.GridPanel({
			title: '产品列表',
			store:this.selectstore,
			height:500,
			autoScroll:true,
			columns: [
				{header:'产品编码',dataIndex:'goods_sn'},
				{header:'SKU',dataIndex:'SKU'},
				{header:'产品名称',dataIndex:'goods_name'}
			],
			tbar:new Ext.Toolbar({
						items:['<b>产品列表</b>',
							   '->','产品编码:',
							   new Ext.form.TextField({
									name:'keyword',
									id:'keyword',
									enableKeyEvents:true,
									listeners:{
										scope:this,
										keypress:function(field,e){
												if(e.getKey()==13){
													selectstore.load({params:{start:0, limit:20,
														keyword:Ext.fly('keyword').dom.value,
														cat_id:''
														}});
												}
											}
									}
								}),
								'-',{
									xtype:'button',
									text:'搜索',
									iconCls:'x-tbar-search',
									handler:function(){
										//console.log(Ext.fly('keyword'));
										selectstore.load({params:{start:0, limit:20,
											keyword:Ext.fly('keyword').dom.value,
											cat_id:''
											}});
										}
								}
							]}),
			bbar:new Ext.PagingToolbar({
			pageSize: 20,
			displayInfo: true,
			displayMsg: '第{0} 到 {1} 条数据 共{2}条',
			emptyMsg: "没有数据",
            store: this.selectstore			   
        	}),
			viewConfig: {
				forceFit: true
			}
		});
		
        var win = new Ext.Window({
            title: '产品列表',
            closeAction: 'hide',
			closable:true,
			width:600,
			height:530,
			y:20,
			layout:'column',
            modal: true,
            items: [
					{
						columnWidth:0.3,
						items:[tree]
					},{
						columnWidth:0.7,
						items:[grid]
					}
            ]
        });
		var Item = Ext.data.Record.create([{
			name:'rec_id',
			type:'float'
		},{
			name : 'goods_sn'
		}, {
			name : 'goods_id',
			type:'float'
		}, {
			name : 'goods_name'
		}, {
			name : 'goods_qty',
			type : 'float'
		}, {
			name : 'num'
		}]);

		if(!this.goodsGrid) this.creatGoodsgrid();
		var goodsgrid = this.goodsGrid;
		grid.on('rowclick', function(grid, rowIndex, e) {
			var getinfo = selectstore.getAt(rowIndex);
			var p = new Item({rec_id:0,goods_sn:getinfo.get('goods_sn'),goods_id:getinfo.get('goods_id'),goods_name:getinfo.get('goods_name'),goods_qty:0});
			if(num == 1) {
				var getSelect = goodsgrid.getSelectionModel().getSelected();
				getSelect.set('goods_name',getinfo.get('goods_name'));
				getSelect.set('goods_id',getinfo.get('goods_id'));
				getSelect.set('goods_sn',getinfo.get('goods_sn'));
			}
			else {
				thiz.addItem(p);
				Ext.getCmp('keyword').destroy();
			}
			win.hide();
		});
		win.show();
    },
	calculate:function(){//计算物品总数量和总金额
		var i;
		var totalQty = 0;
		var totalAmt = 0;
		for (i = 0; i < this.goodsstore.getCount(); i++) {
			totalQty += this.goodsstore.getAt(i).get('goods_qty') * 10000;
		}
		this.txt_totQty.setValue(totalQty / 10000);
	}
});

